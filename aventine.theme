<?php

/**
 * @file
 * Functions to support theming in the aventine theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements template_preprocess_html().
 *
 * @param array $variables
 */
function aventine_preprocess_html(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements template_preprocess_page.
 *
 * @param array $variables
 */
function aventine_preprocess_page(&$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = ['#type' => 'link', '#title' => $site_name, '#url' => Url::fromRoute('<front>')];
}

/**
 * Change the link title of the language block.
 */
function aventine_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'EN';
  $variables['links']['it']['link']['#title'] = 'IT';
}

/**
 *
 */
function aventine_preprocess_region(&$variables) {
  $variables['url'] = $_SERVER['REQUEST_URI'];
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function aventine_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_node().
 */
function aventine_preprocess_node__events__card(array &$variables) {
  // Node.
  $node = $variables['elements']['#node'];
  // Langcode.
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  // Vocabularies.
  $is_event_series = $node->field_events_event_series->isEmpty();
  $is_event_type = $node->get('field_events_event_type')->isEmpty();
  $term_reference_event_series = 'field_events_event_series';
  $term_reference_event_type = 'field_events_event_type';
  // Setting datetime variables.
  $date_formatter = \Drupal::service('date.formatter');
  $date_start = new DrupalDateTime($node->field_events_event_dates->value, 'UTC');
  $date_end = new DrupalDateTime($node->field_events_event_dates->end_value, 'UTC');
  $date_end_check = $node->field_events_event_dates->end_value;
  // Variables for single datetime.
  $academy_date_start = $date_formatter->format($date_start->getTimestamp(), 'academy_date');
  $academy_date_no_year_start = $date_formatter->format($date_start->getTimestamp(), 'academy_date_no_year');
  $academy_date_time_start = $date_formatter->format($date_start->getTimestamp(), 'academy_date_and_time');
  $academy_time_start = $date_formatter->format($date_start->getTimestamp(), 'academy_time');
  $academy_date_end = $date_formatter->format($date_end->getTimestamp(), 'academy_date');
  $academy_date_no_year_end = $date_formatter->format($date_end->getTimestamp(), 'academy_date_no_year');
  // Variables for daterange, start.
  $date_start_year = $date_formatter->format($date_start->getTimestamp(), 'year');
  $date_start_month = $date_formatter->format($date_start->getTimestamp(), 'month');
  $date_start_date = $date_formatter->format($date_start->getTimestamp(), 'date');
  // Variables for daterange, end.
  $date_end_year = $date_formatter->format($date_end->getTimestamp(), 'year');
  $date_end_month = $date_formatter->format($date_end->getTimestamp(), 'month');
  $date_end_date = $date_formatter->format($date_end->getTimestamp(), 'date');

  if (!is_null($date_end_check)) {
    if ($date_start_year != $date_end_year) {
      $variables['custom_date_range'] = $academy_date_start . "–" . $academy_date_end;
    }
    elseif ($date_start_year == $date_end_year && $date_start_month != $date_end_month) {
      $variables['custom_date_range'] = $academy_date_no_year_start . "–" . $academy_date_no_year_end . ", " . $date_start_year;
    }
    elseif ($date_start_year == $date_end_year && $date_start_month == $date_end_month) {
      if ($langcode == 'en') {
        $variables['custom_date_range'] = $date_start_month . " " . $date_start_date . "–" . $date_end_date . ", " . $date_start_year;
      }
      elseif ($langcode == 'it') {
        $variables['custom_date_range'] = $date_start_date . "–" . $date_end_date . " " . $date_start_month . " " . $date_start_year;
      }
    }
  }
  else {
    $variables['academy_date'] = $academy_date_start;
    $variables['academy_date_time_start'] = $academy_date_time_start;
    $variables['academy_time'] = $academy_time_start;
  }

  $variables['academy_date'] = 'foobar';
  $variables['academy_date_time_start'] = $academy_date_time_start;
  $variables['academy_time'] = $academy_time_start;

  if ($node && !$node->field_events_event_series->isEmpty()) {
    $referenced_entities_event_series = $node->get($term_reference_event_series)->referencedEntities();
    foreach ($referenced_entities_event_series as $term) {
      $variables['event_description'] = $term;
      $term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $langcode);
    }
    $variables['description'] = $referenced_entities_event_series[0]->description->value;
  }
  elseif ($node && $is_event_series == TRUE && $is_event_type == FALSE) {
    $referenced_entities_event_type = $node->get($term_reference_event_type)->referencedEntities();
    foreach ($referenced_entities_event_type as $term) {
      $term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $langcode);
      $name = $term->getName();
      $description = $term->getDescription();
      if (!$description == NULL) {
        $variables['event_description'] = t($description);
        // $variables['attributes']['class'][] = Html::cleanCssIdentifier($term->getType());
      }
    }
  }
}
