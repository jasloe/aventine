<?php

/**
 * @file
 * Functions to support theming in the aventine theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements template_preprocess_html().
 *
 * @param array $variables
 */
function aventine_preprocess_html(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements template_preprocess_page.
 *
 * @param array $variables
 */
function aventine_preprocess_page(&$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = ['#type' => 'link', '#title' => $site_name, '#url' => Url::fromRoute('<front>')];
  $current_path = \Drupal::service('path.current')->getPath();

}

/**
 * Change the link title of the language block.
 */
function aventine_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'EN';
  $variables['links']['it']['link']['#title'] = 'IT';
}

/**
 * Swap the system branding block.
 */
function aventine_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_branding_block') {
    $variables['wordmark'] = 'testing';
  }
}

/**
 *
 */
function aventine_preprocess_region(&$variables) {
  $variables['url'] = $_SERVER['REQUEST_URI'];
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function aventine_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_node().
 */
function aventine_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $view_mode = $variables['elements']['#view_mode'];
  $date_formatter = \Drupal::service('date.formatter');
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $timezone = $node->field_events_rel_places?->entity->field_time_zone->value;

  switch ($view_mode) {
    case "full":
      // Create datetime objects.
      $date_formatter = \Drupal::service('date.formatter');
      $datetime_start = new DrupalDateTime($node->field_events_event_dates?->value, 'UTC');
      $datetime_end = (new DrupalDateTime($node->field_events_event_dates?->end_value, 'UTC'));
      // Defaults, fallbacks.
      $date_start_default = $date_formatter->format($datetime_start->getTimestamp(), 'date_default');
      $date_end_default = $date_formatter->format($datetime_end->getTimestamp(), 'date_default');
      // Set up formats.
      $daterange_start_no_year = $date_formatter->format($datetime_start->getTimestamp(), 'date_range_no_year');
      $daterange_end_no_year = $date_formatter->format($datetime_end->getTimestamp(), 'date_range_no_year');
      $date_start_year = $date_formatter->format($datetime_start->getTimestamp(), 'year');
      $date_end_year = $date_formatter->format($datetime_end->getTimestamp(), 'year');
      $date_start_month = $date_formatter->format($datetime_start->getTimestamp(), 'month');
      $date_end_month = $date_formatter->format($datetime_end->getTimestamp(), 'month');
      $date_start_date = $date_formatter->format($datetime_start->getTimestamp(), 'day');
      $date_end_date = $date_formatter->format($datetime_end->getTimestamp(), 'day');
      $time_start_default = $date_formatter->format($datetime_start->getTimestamp(), 'time_default');
      $time_start = $date_formatter->format($datetime_start->getTimestamp(), 'time_start');
      $time_end = $date_formatter->format($datetime_end->getTimestamp(), 'time_end');
      $date_end_check = $node->field_events_event_dates?->end_value;
      // Set fallbacks.
      // If date end is empty and date start and date end are equivalent, assume the standard date and time output.
      if (is_null($date_end_check) || $datetime_start == $datetime_end) {
        $variables['custom_date'] = $date_start_default;
      }
      // Date range spans multiple years.
      elseif (!is_null($date_end_check) && $date_start_year != $date_end_year) {
        $variables['custom_date'] = $date_start_default . "–" . $date_end_default;
      }
      // Date range spans multiple months in the same year.
      elseif (!is_null($date_end_check) && $date_start_year == $date_end_year && $date_start_month != $date_end_month) {
        $variables['custom_date'] = $daterange_start_no_year . "–" . $daterange_end_no_year . ", " . $date_start_year;
      }
      // Date range spans multiple days in the same month.
      elseif (!is_null($date_end_check) && $date_start_year == $date_end_year && $date_start_month == $date_start_month && $date_start_date != $date_start_date) {
        $variables['custom_date'] = $daterange_start_no_year . "–" . $daterange_end_no_year . ", " . $date_start_year;
      }
      // Fallback to standard formatting.
      else {
        $variables['custom_date'] = $date_start_default;
      }
      // Time formatting, single value.
      if (is_null($date_end_check) || $datetime_start == $datetime_end) {
        $variables['custom_time'] = $time_start_default;
      }
      // Time formatting, range.
      elseif ($date_start_date != $date_end_date) {
        $variables['custom_time'] = $time_start . '–' . $time_end;
        ;
      }
      break;

    case "card":
      // Vocabularies.
      if ($node && !$node->field_events_event_series?->isEmpty()) {
        $referenced_entities_event_series = $node->field_events_event_series?->referencedEntities();
        foreach ($referenced_entities_event_series as $term) {
          $variables['event_description'] = $term;
          $term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $langcode);
        }
        $variables['description'] = $referenced_entities_event_series[0]->description->value;
      }
      elseif ($node && $node->field_events_event_series->isEmpty() && !$node->field_events_event_type->isEmpty()) {
        $referenced_entities_event_type = $node->field_events_event_type?->referencedEntities();
        foreach ($referenced_entities_event_type as $term) {
          $term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $langcode);
          // $name = $term->getName();
          $description = $term->getDescription();
          if (!$description == NULL) {
            $variables['description'] = t($description);
            // $variables['attributes']['class'][] = Html::cleanCssIdentifier($term->getType());
          }
        }
      }
  }
}
