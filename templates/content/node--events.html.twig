{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<article{{attributes.addClass(classes)}}>
	<div class="event-container">
		<div class="row row-first">
			<div class="event-header">
				<div class="event-time-place">
					<div class="field daterange">
						{% if (node.field_events_event_type.entity.name.value == "Exhibition") %}
							{{ node.field_events_event_dates.value|date('F j') }}â€“{{ node.field_events_event_dates.end_value|date('F j, Y') }}
						{% else %}
							{{ node.field_events_event_dates.value|date('U')|format_date('events') }}
						{% endif %}
					</div>

					<div class="field field-events-rel-places entity-reference field__items">
						{{ content.field_events_rel_places[0]['#node'].field_places_address.locality }}
					</div>

					{% if content.field_events_event_series|render is not empty %}
						{{ content.field_events_event_series }}
					{% else %}
						{{ content.field_events_event_type }}
					{% endif %}

					<h1 class="title serif">{{ label }}</h1>
				</div>
			</div>
			<div class="event-image-wrapper">
				{{ content.field_events_image}}
			</div>

		</div>

		{# row: primary content #}
		<div class="grid-parent row-second">
			<div class="grid-item grid-item-1 event-body">
				{{ content.body }}
			</div>
			<div class="grid-item grid-item-2 event-dates col-right">
				{{ content.field_events_event_dates }}
			</div>
			<div class="grid-item grid-item-3 event-location col-right">
				{{ content.field_events_rel_places }}
			</div>
			{% if content.field_event_registration_copy|render is not empty %}
				<div class="grid-item grid-item-4 event-register col-right">
					{{ content.field_event_registration_copy }}
					<a href={{ content.field_events_registration.0['#url'] }} target="_blank">
						{{ content.field_events_registration.0['#title'] }}
					</a>
				</div>
			{% endif %}
			{% if content.field_security_notice|render is not empty %}
				<div class="grid-item grid-item-5 event-security col-right">
					{{ content.field_security_notice }}
				</div>
			{% endif %}
			{% if content.field_events_more_info|render is not empty %}
				<div class="grid-item grid-item-6 event-more-info col-right">
					{{ content.field_events_more_info }}
				</div>
			{% endif %}

		</div>


		{# related content #}
		<div class="row row-third">
			<div class="related-container">
				<div class="block-title">Related content</div>
				<div class="related-group">
					<div class="related-item">
						{{ drupal_block('views_block:related_content-events_people', {'label': true} ) }}
					</div>
					<div class="related-item">
						{{ drupal_block('views_block:related_content-events_news', {'label': true} ) }}
					</div>
				</div>
			</div>
		</div>
	</article>
